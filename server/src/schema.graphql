type Query {
  wallet(stakeAddress: String!): Wallet!
  wallets(stakeAddresses: [String!]!): [Wallet!]!
  buildTx(
    stakeAddress: String!
    value: TxValue!
    paymentAddress: String!
  ): TxBody!
  submitTx(tx: String!): TxResult!
}

type Wallet {
  balance: String!
  marketPrice: Float!
  txs: [Tx!]!
}

type Tx {
  type: TxDirection!
  amount: String!
  fees: String
  date: Int!
  id: String!
}

enum TxDirection {
  Outgoing
  Incoming
}

type TxBody {
  hex: String!
  witnessesAddress: [String!]!
  summary: TxBodySummary!
}

input TxValue {
  lovelace: String!
  assets: [EncodedAsset!]!
}

input EncodedAsset {
  hex: String!
  quantity: String!
}

type TxResult {
  hash: String!
}

type TxBodySummary {
  fees: String!
  paymentAddresses: [TxOutput!]!
}

type TxOutput {
  address: String!
  amount: Amount!
}

type Amount {
  lovelace: String!
  # multiAsset: [MultiAsset!]!
}

# type MultiAsset {
#   hash: String!
#   assets: [Asset!]!
# }

type Asset {
  name: String!
  quantity: String!
}
